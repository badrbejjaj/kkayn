<?php
/**
 * {{bundleExtensionName}}
 *
 * PHP version 5
 *
 * @category Class
 * @package  {{invokerPackage}}\DependencyInjection
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

{{>partial_header}}
/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace {{invokerPackage}}\DependencyInjection;

use Symfony\Component\Config\FileLocator;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Extension\Extension;
use Symfony\Component\DependencyInjection\Extension\PrependExtensionInterface;
use Symfony\Component\DependencyInjection\Loader\YamlFileLoader;

/**
 * {{bundleExtensionName}} Class Doc Comment
 *
 * @category Class
 * @package  {{invokerPackage}}\DependencyInjection
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class {{bundleExtensionName}} extends Extension implements PrependExtensionInterface
{
    public function load(array $configs, ContainerBuilder $container)
    {
        $loader = new YamlFileLoader($container, new FileLocator(__DIR__.'/../Resources/config'));
        $loader->load('services.yml');
    }

    public function getAlias()
    {
        return '{{bundleAlias}}';
    }

  public function prepend(ContainerBuilder $container)
    {
       $this->createAccessControl($container);
    }

    /**
     * Create security access control.
     *
     * Beware, crappy. Using ReflexionClasses because it's currently impossible to override security.access_control.
     * See https://github.com/symfony/symfony/issues/24461#issuecomment-334731627
     * TODO: cache this.
     *
     * @param ContainerBuilder $container
     * @return void
     */
    private function createAccessControl(ContainerBuilder $container)
    {
        $accessControl = $this->getAccessControlFromOpenApiSpecs();

        if (empty($accessControl)) {
            return;
        }

        // BEWARE reaaaaally crappy
        $extensionConfigsRefl = new \ReflectionProperty(ContainerBuilder::class, 'extensionConfigs');
        $extensionConfigsRefl->setAccessible(true);
        $extensionConfigs = $extensionConfigsRefl->getValue($container);
        if (!isset($extensionConfigs['security'][0]['access_control'])) {
            $extensionConfigs['security'][0]['access_control'] = [];
        }
        $extensionConfigs['security'][0]['access_control'] = array_merge(
            $extensionConfigs['security'][0]['access_control'], $accessControl);
        $extensionConfigsRefl->setValue($container, $extensionConfigs);
    }

    /**
     * Read openapi.json file and get scopes needed for each operation and method.
     *
     * @return []
     */
    private function getAccessControlFromOpenApiSpecs()
    {
        $specsFile = dirname(__DIR__) . '/Resources/config/apiroutes.json';
        $accessControl = [];

        if (!file_exists($specsFile)) {
            return [];
        }
        $apis = json_decode(file_get_contents($specsFile));
        $paths = get_object_vars($apis->paths);

        foreach ($paths as $path => $pathInfos) {
            $pathInfos = get_object_vars($pathInfos);
            foreach ($pathInfos as $method => $infos) {
                if (!isset($infos->security)) {
                    continue;
                }
                foreach($infos->security as $security) {
                    if (!isset($security->oAuth)) {
                        continue;
                    }
                    // On regarde s'il y a un param integer (pb avec /user/current et /user/4)
                    $regex = "#\{.*\}#";
                    if (preg_match($regex, $path)) {
                        foreach($infos->parameters as $parameter) {
                            if ($parameter->schema->type === 'integer') {
                                $newPath = preg_replace($regex, "[0-9]+", $path);
                            }
                        }

                    } else {
                        $newPath = preg_replace($regex, "[^/]*", $path);
                    }
                    $accessControl[] = [
                        'path'    => '^' . $newPath . '$',
                        'roles'   => array_map(function($scope) {
                            return 'ROLE_' .  strtoupper($scope);
                        }, $security->oAuth),
                        'methods' => [strtoupper($method)],
                    ];
                }
            }
        }
        return $accessControl;
    }
}
